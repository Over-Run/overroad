plugins {
    id "java"
    id "fabric-loom" version "1.1-SNAPSHOT" apply false
}

subprojects {
    apply plugin: "fabric-loom"

    group = projGroupId
    version = projVersion

    repositories {
        maven { url = "https://jitpack.io/" }
        maven { url = "https://maven.terraformersmc.com/" }
        maven { url = "https://maven.parchmentmc.org/" }
    }

    loom {
        runs {
            datagenClient {
                inherit client
                name "Data Generation"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
                vmArg "-Dfabric-api.datagen.modid=${modNamespace}"

                runDir "build/datagen"
            }
        }
    }

    sourceSets {
        main {
            resources {
                srcDirs += ["src/main/generated"]
            }
        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release.set(targetJavaVersion)
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
        }
        archivesBaseName = "$projArtifactId"
        withSourcesJar()
    }

    jar {
        manifestContentCharset 'utf-8'
        metadataCharset 'utf-8'
        from('LICENSE') { rename { "${it}_${archivesBaseName}" } }
        from rootProject.sourceSets.main.resources
    }
}

for (String ver : ["1.18.2", "1.19.2"]) {
    project("fabric-$ver") {
        dependencies {
            def parchmentVersion = getXml("https://ldtteam.jfrog.io/artifactory/parchmentmc-internal/org/parchmentmc/data/parchment-${ver}/maven-metadata.xml").versioning.release
            minecraft "com.mojang:minecraft:$ver"
            mappings loom.layered() {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-$ver:$parchmentVersion@zip")
            }
            modImplementation "net.fabricmc:fabric-loader:$fabricLoaderVersion"
        }

        java {
            archivesBaseName = "$projArtifactId-$ver"
        }
    }
}

static Object getXml(String url) {
    int tries = 0
    while (true) {
        try {
            if (tries > 1) {
                System.out.println("Parsed ${url} after ${tries} tries")
            }
            return new XmlSlurper().parse(url)
        } catch (Exception e) {
            Thread.sleep(1000)
            tries++
            if (tries > 50) {
                throw new IllegalStateException(e)
            }
        }
    }
}
